@startuml

title __MULTI's Class Diagram__\n

  package sase.multi {
    class MultiPatternGraph {
        - maxSubSets : HashMap<Set<EventType>, Set<CompositePattern>>
        - patternToMaxSubSets : HashMap<CompositePattern, Set<Set<EventType>>>
        - coloredPatterns : Set<CompositePattern>
        {static} - getRandomKey()
        + MultiPatternGraph()
        - calculateMaxEventSubSet()
        - getEventTypesForConditionIntersection()
        + addPattern()
        + removePattern()
        + getPatternsByMaxSubSet()
        + getPatternPeerMaxSubSets()
        + getAllPatterns()
        + getRandomPattern()
        + getRandomMaxSubSet()
        + getColoredPatterns()
        + colorPattern()
        + uncolorPattern()
        + uncolorAll()
        + validateColoring()
        + isColoringOn()
    }
  }
  

  package sase.multi {
    class MultiPatternMultiTree {
        - patterns : List<CompositePattern>
        - acceptingNodes : HashMap<Long, Node>
        - singlePatternTrees : HashMap<Long, Node>
        - leaves : HashMap<EventType, LeafNode>
        + MultiPatternMultiTree()
        + MultiPatternMultiTree()
        + MultiPatternMultiTree()
        - initDataStructures()
        - addPatternPlan()
        - recursiveUpdateTimeWindow()
        - getOrCreateSharedNode()
        - getSharedNode()
        - findInternalNodeInSubtree()
        - getOrCreateSharedLeaf()
        + addPatternPlan()
        + removePatternPlan()
        - recursiveRemovePlan()
        + getPlanForPattern()
        + getPatterns()
        + getSignature()
        - enableEventTypeCache()
        + getFilteredSharedSubtrees()
        - hasIntersection()
        + getSharedSubtrees()
        - recursiveGetSharedSubtrees()
        + getAcceptingNodes()
        + getSinglePatternTrees()
        + getLeaves()
        + toString()
    }
  }
  

  package sase.multi {
    class MultiPatternTree {
        - root : MultiPatternTreeNode
        - acceptingNodes : HashMap<Long, MultiPatternTreeNode>
        - idToPattern : HashMap<Long, CompositePattern>
        + MultiPatternTree()
        + MultiPatternTree()
        + MultiPatternTree()
        - recursiveCopy()
        + getRoot()
        + addPatternPlan()
        + removePatternPlan()
        + getPlanForPattern()
        + getPatterns()
        + getSignature()
        + toString()
    }
  }
  

  package sase.multi {
    class MultiPatternTreeNode {
        {static} - idCounter : Long
        - id : Long
        - eventType : EventType
        - condition : CNFCondition
        - originalTimeWindow : Long
        - timeWindow : Long
        # children : List<MultiPatternTreeNode>
        - acceptingPatternId : Long
        - level : int
        + MultiPatternTreeNode()
        + MultiPatternTreeNode()
        + getAcceptingPatternId()
        + setAcceptingPatternId()
        + resetAcceptingPatternId()
        + getParent()
        + getAllChildren()
        + hasChildren()
        + getEventType()
        + getCondition()
        + getTimeWindow()
        + getOriginalTimeWindow()
        + isRoot()
        # setMaxTimeWindow()
        + refreshTimeWindow()
        + addChild()
        + removeChild()
        + getSignature()
        + toString()
    }
  }
  

  package sase.multi {
    abstract class MultiPlan {
        # enableSharing : boolean
        # slaAwarePatterns : Set<SlaAwarePattern>
        # graph : MultiPatternGraph
        # algoUnit : IAlgoUnit
        # potentiallyColoredPatterns : Set<CompositePattern>
        + MultiPlan()
        + MultiPlan()
        + MultiPlan()
        + isSharingEnabled()
        + setAlgoUnit()
        + getAlgoUnit()
        + addPatternPlan()
        + replacePatternPlan()
        + getSlaAwarePatterns()
        + getGraph()
        + setGraph()
        + registerPotentiallyColoredPatterns()
        + applyColoring()
        + equals()
        + hashCode()
        {abstract} + addPatternPlan()
        {abstract} + removePatternPlan()
        {abstract} + getPlanForPattern()
        {abstract} + getPatterns()
        {abstract} + getSignature()
    }
  }
  

  package sase.multi {
    class SharedMultiPatternTreeNode {
        - childrenByType : HashMap<EventType, MultiPatternTreeNode>
        - childrenByTypeAndCondition : HashMap<EventType, HashMap<CNFCondition, MultiPatternTreeNode>>
        + SharedMultiPatternTreeNode()
        + SharedMultiPatternTreeNode()
        + addChild()
        + removeChild()
    }
  }
  

  MultiPatternTreeNode o-- MultiPatternTreeNode : parent


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
