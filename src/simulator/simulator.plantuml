@startuml

title __SIMULATOR's Class Diagram__\n

  package sase.simulator {
    class Environment {
        {static} - environment : Environment
        - statisticsManager : StatisticsManager
        - eventRateEstimator : IEventArrivalRateEstimator
        - selectivityEstimator : SlidingWindowSelectivityEstimator
        - evaluationMechanismInfo : IEvaluationMechanismInfo
        - predicateResultsCache : PredicateResultsCache
        - adaptationNecessityDetector : IAdaptationNecessityDetector
        - evaluationPlanCreator : EvaluationPlanCreator
        {static} + getEnvironment()
        - Environment()
        + reset()
        + destroy()
        + getStatisticsManager()
        + getSelectivityEstimator()
        + getEventRateEstimator()
        + getEvaluationMechanismInfo()
        + setEvaluationMechanismInfo()
        + getPredicateResultsCache()
        + getAdaptationNecessityDetector()
        + getEvaluationPlanCreator()
        + isTimeoutReached()
    }
  }
  

  package sase.simulator {
    class PredicateResultsCache {
        - cache : HashMap<AtomicCondition, DoubleEventPredicateCache>
        + PredicateResultsCache()
        + recordConditionEvaluation()
        + getConditionEvaluationResult()
        + clear()
    }
  }
  

  package sase.simulator {
    class DoubleEventPredicateCache {
        - cache : HashMap<Event, HashMap<Event, Boolean>>
        + DoubleEventPredicateCache()
        + recordConditionEvaluation()
        + getConditionEvaluationResult()
    }
  }
  

  package sase.simulator {
    class SimulationHistory {
        - simulations : HashMap<String, StatisticsManager>
        + SimulationHistory()
        + registerSimulation()
        + getStatisticsManagerForSimulation()
    }
  }
  

  package sase.simulator {
    class Simulator {
        {static} - dateFormat : DateFormat
        - specifications : List<SimulationSpecification>
        - workload : IWorkloadManager
        - timeWindow : Long
        - eventProducer : EventProducer
        - eventRateEstimator : EventRateCollector
        - primaryEvaluationMechanism : IEvaluationMechanism
        - secondaryEvaluationMechanism : IEvaluationMechanism
        - lastAdaptCheckTimestamp : Long
        - secondaryEvaluationMechanismCreationTimestamp : Long
        - simulationHistory : SimulationHistory
        - currentHistoryId : String
        - oldStatisticsManager : StatisticsManager
        - currentStepNumber : int
        - processIncomingEvent()
        - actuallyProcessIncomingEvent()
        - addIfNotNull()
        - processNewEventOnEvaluationMechanism()
        - validateTimeWindowOnEvaluationMechanism()
        - tryAdaptEvaluation()
        - tryModifyWorkload()
        - createSecondaryEvaluationMechanism()
        - updateColoredPatterns()
        - createNewEvaluationMechanism()
        - createNewEvaluationMechanism()
        - recordNewMatches()
        - attemptToRecoverExistingStatistics()
        - prepareNextEvaluationStep()
        - runEvaluationStep()
        - cleanupEvaluationStep()
        - generateSpecifications()
        - createSpecificationsForTimeWindows()
        - start()
        - runEvaluation()
        - finish()
        - execute()
        {static} + main()
    }
  }
  

  PredicateResultsCache +-down- DoubleEventPredicateCache


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
