@startuml

title __BASE's Class Diagram__\n

  package sase.pattern {
    package sase.pattern.condition {
      package sase.pattern.condition.base {
        abstract class AtomicCondition {
            + AtomicCondition()
            + AtomicCondition()
            + getSelectivity()
            + verify()
            - getEventByType()
            # shouldIgnoreSelectivityMeasurements()
            {abstract} # actuallyVerify()
        }
      }
    }
  }
  

  package sase.pattern {
    package sase.pattern.condition {
      package sase.pattern.condition.base {
        class BufferedEventsRatesCondition {
            - order : List<EventType>
            + BufferedEventsRatesCondition()
            # verifySingleEvent()
            + toString()
            # getConditionKey()
        }
      }
    }
  }
  

  package sase.pattern {
    package sase.pattern.condition {
      package sase.pattern.condition.base {
        class CNFCondition {
            # atomicConditions : List<AtomicCondition>
            + CNFCondition()
            + CNFCondition()
            + CNFCondition()
            + CNFCondition()
            + getSelectivity()
            - addEventTypes()
            + verify()
            + getAtomicConditions()
            + addAtomicCondition()
            + addAtomicCondition()
            + addAtomicConditions()
            + removeAtomicCondition()
            + removeAtomicConditions()
            - shouldAddCondition()
            - getUnknownTypes()
            + getSubConditionsByOrder()
            - getFilteredConditions()
            + getConditionForTypes()
            + getConditionExcludingTypes()
            + getConditionForType()
            + getConditionExcludingType()
            + getFiltersForType()
            + getConditionBetweenTypeSets()
            + getIntersection()
            + isEmpty()
            + toString()
            # getConditionKey()
            + equals()
            + hashCode()
        }
      }
    }
  }
  

  package sase.pattern {
    package sase.pattern.condition {
      package sase.pattern.condition.base {
        abstract class DoubleEventCondition {
            # firstType : EventType
            # secondType : EventType
            + DoubleEventCondition()
            + DoubleEventCondition()
            # actuallyVerify()
            + getLeftEventType()
            + getRightEventType()
            # getConditionKey()
            {abstract} # verifyDoubleEvent()
        }
      }
    }
  }
  

  package sase.pattern {
    package sase.pattern.condition {
      package sase.pattern.condition.base {
        abstract class SingleEventCondition {
            # type : EventType
            + SingleEventCondition()
            # actuallyVerify()
            + getType()
            {abstract} # verifySingleEvent()
        }
      }
    }
  }
  

  package sase.pattern {
    package sase.pattern.condition {
      package sase.pattern.condition.base {
        class TrivialCondition {
            # actuallyVerify()
            # shouldIgnoreSelectivityMeasurements()
            + toString()
            # getConditionKey()
        }
      }
    }
  }
  



right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
