@startuml

title __PATTERN's Class Diagram__\n

  package sase.pattern {
    class CompositePattern {
        - nestedPatterns : List<Pattern>
        {static} - createEventListFromPatternList()
        + CompositePattern()
        + isActuallyComposite()
        # getValidPatternTypes()
        # getPatternCategoryName()
        + getNestedPatterns()
        + getCNFCondition()
        + extractSequences()
        - shouldIncludePattern()
        - getEventTypesForPatternType()
        + getNegativeEventTypes()
        + getIterativeEventTypes()
        + getSubPattern()
        + getFilteredSubPattern()
        + toString()
    }
  }
  

  package sase.pattern {
    abstract class EventTypesManager {
        {static} - instance : EventTypesManager
        - typesInitialized : boolean
        - eventNameToEventType : HashMap<String, EventType>
        - eventLongNameToShortName : HashMap<String, String>
        {static} + getInstance()
        {static} + setInstance()
        {static} + isInitialized()
        # EventTypesManager()
        + initializeTypes()
        + getTypeByName()
        + getShortNameByLongName()
        + convertNamesToTypes()
        {abstract} + getEventLabel()
        {abstract} + getEventTimestamp()
        {abstract} + convertStringPayloadToObjectPayload()
        {abstract} + getAverageEventSize()
        {abstract} + getKnownEventTypes()
        {abstract} + getKnownEventTypeNames()
        {abstract} # actuallyInitializeTypes()
        {abstract} # createNameToTypeHash()
        {abstract} # createLongNameToShortNameHash()
    }
  }
  

  package sase.pattern {
    abstract class Pattern {
        {static} - patternIdCounter : Long
        - patternId : Long
        - condition : Condition
        - timeWindow : long
        - eventTypes : List<EventType>
        + Pattern()
        + getPatternId()
        + getType()
        + getEventTypes()
        + getCondition()
        + getTimeWindow()
        - validatePatternType()
        # getSubCondition()
        {abstract} + isActuallyComposite()
        {abstract} # getValidPatternTypes()
        {abstract} # getPatternCategoryName()
    }
  }
  

  package sase.pattern {
    enum PatternOperatorTypes {
      NONE
      OLD_SEQ
      OLD_AND
      NOP
      NEG
      ITER
      SEQ
      AND_SEQ
      OR
    }
  }
  

  package sase.pattern {
    class SimplePattern {
        + SimplePattern()
        + isActuallyComposite()
        # getValidPatternTypes()
        # getPatternCategoryName()
    }
  }
  

  package sase.pattern {
    class UnaryPattern {
        {static} - createListFromSingleEventType()
        {static} + getUnaryPatternTypes()
        + UnaryPattern()
        + getEventType()
        + isActuallyComposite()
        # getValidPatternTypes()
        # getPatternCategoryName()
    }
  }
  

  Pattern o-- PatternOperatorTypes : type
  Pattern +-down- PatternOperatorTypes


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
