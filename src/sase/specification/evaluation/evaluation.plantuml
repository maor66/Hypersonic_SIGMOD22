@startuml

title __EVALUATION's Class Diagram__\n

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class CostBasedLazyNFAEvaluationSpecification {
          + orderingAlgorithmType : OrderingAlgorithmTypes
          + costModelType : CostModelTypes
          + throughputToLatencyRatio : Double
          + CostBasedLazyNFAEvaluationSpecification()
          + CostBasedLazyNFAEvaluationSpecification()
          + getShortDescription()
          + getLongDescription()
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      abstract class EvaluationSpecification {
          + type : EvaluationMechanismTypes
          + EvaluationSpecification()
          + getShortDescription()
          + getLongDescription()
          + toString()
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class FixedLazyNFAEvaluationSpecification {
          + evaluationOrder : String[]
          + FixedLazyNFAEvaluationSpecification()
          - getShortEvaluationOrder()
          - evaluationOrderAsString()
          + getShortDescription()
          + getLongDescription()
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class IterativeImprovementMPTEvaluationSpecification {
          + maxSteps : int
          + maxNeighbors : int
          + IterativeImprovementMPTEvaluationSpecification()
          + getShortDescription()
          + getLongDescription()
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class LazyNFAEvaluationSpecification {
          + negationType : LazyNFANegationTypes
          + LazyNFAEvaluationSpecification()
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class LocalSearchMPTEvaluationSpecification {
          + neighborhoodType : NeighborhoodTypes
          + timeLimitInSeconds : Long
          + multiSetParameter : int
          + LocalSearchMPTEvaluationSpecification()
          + getShortDescription()
          + getLongDescription()
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class MultiPlanEvaluationSpecification {
          + mptCalculatorType : MPTCalculatorTypes
          + algoUnitSpecification : AlgoUnitSpecification
          + MultiPlanEvaluationSpecification()
          + getShortDescription()
          + getLongDescription()
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class SimulatedAnnealingMPTEvaluationSpecification {
          + maxStepsSinceImprovement : int
          + alpha : double
          + numOfNeighborsForTempInit : int
          + SimulatedAnnealingMPTEvaluationSpecification()
          + getShortDescription()
          + getLongDescription()
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class TabuSearchMPTEvaluationSpecification {
          + maxStepsSinceImprovement : int
          + neighborsPerStep : int
          + memorySize : int
          + TabuSearchMPTEvaluationSpecification()
          + getShortDescription()
          + getLongDescription()
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class TreeEvaluationSpecification {
          + topologyCreatorType : TopologyCreatorTypes
          + treeCostModelType : TreeCostModelTypes
          + throughputToLatencyRatio : Double
          + TreeEvaluationSpecification()
          + getShortDescription()
          + getLongDescription()
      }
    }
  }
  



right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
