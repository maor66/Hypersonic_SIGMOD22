@startuml

title __EAGER's Class Diagram__\n

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.eager {
        class AND_NFA {
            # sase.pattern : CompositePattern
            + AND_NFA()
            {static} - getAllPermutations()
            - getAllEventsOrders()
            # buildStatesSubTree()
            # recursiveBuildStatesSubTree()
            # initNFAStructure()
            + getStructureSummary()
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.eager {
        class AND_SEQ_NFA {
            - negativeTemporalConditions : HashMap<EventType, CNFCondition>
            - negativeTypesAtSequenceEnd : List<EventType>
            - negatedEventsBuffer : EfficientInputBuffer
            - frozenInstances : List<Instance>
            + AND_SEQ_NFA()
            - initNegativeTemporalConditions()
            - addContiguityConstraints()
            - addPairwiseContiguityConstraints()
            - addTotalContiguityConstraints()
            - isSequenceOrderViolation()
            - addTransitionsForIterativeTypeState()
            # buildStatesSubTree()
            # recursiveBuildStatesSubTree()
            + validateTimeWindow()
            + processNewEvent()
            - verifySingleNegativeEventType()
            - hasNegativeTypesAtSequenceEnd()
            # performMatchPostProcessing()
            # getInstancesNumber()
            + size()
            # getBufferedEventsNumber()
            + getLastMatches()
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.eager {
        class OR_AND_SEQ_NFA {
            + OR_AND_SEQ_NFA()
            # initNFAStructure()
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.eager {
        class SEQ_NFA {
            # sase.pattern : Pattern
            + SEQ_NFA()
            {static} + addTimingConstraints()
            # initNFAStructure()
            - buildStatesChain()
            - buildStatesChain()
            - buildStatesChain()
            + getStructureSummary()
            + getStateByAtomicCondition()
            + getStateReachProbability()
        }
      }
    }
  }
  



right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
