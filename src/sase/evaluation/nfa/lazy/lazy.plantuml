@startuml

title __LAZY's Class Diagram__\n

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        class LazyChainNFA {
            # negationType : LazyNFANegationTypes
            # evaluationOrder : EvaluationOrder
            - fullCondition : CNFCondition
            - globalTemporalOrderCondition : GlobalTemporalOrderCondition
            + LazyChainNFA()
            - createFullCondition()
            # initNFAStructure()
            - buildStatesChainWithFirstChanceNegation()
            - buildStatesChainWithPostProcessingNegation()
            # buildStatesChain()
            # buildStatesChain()
            - addTransitionBetweenChainStates()
            - canReceiveNegativeEventFromInputStream()
            - getPositivePrecedingEvents()
            - getPositiveSucceedingEvents()
            - getPositiveDependingEvents()
            - getOutgoingPositiveMatchTransition()
            - addTimeoutStateBeforeFinalState()
            - makeLastTransitionHighPriority()
            # addTimeoutTransition()
            + getStructureSummary()
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        class LazyMultiChainNFA {
            - nestedPlans : HashMap<Pattern, EvaluationPlan>
            # negationType : LazyNFANegationTypes
            + LazyMultiChainNFA()
            # initNFAStructure()
            + getStructureSummary()
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        class LazyMultiPatternTreeNFA {
            - multiPatternTree : MultiPatternTree
            + LazyMultiPatternTreeNFA()
            + getStructureSummary()
            # initNFAStructure()
            - recursiveBuildNFAStructure()
            - removeTemporalCondition()
            # createInstance()
            + getMultiPlan()
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        abstract class LazyNFA {
            # rejectingState : NFAState
            # inputBuffer : EfficientInputBuffer
            # unboundedIterativeEventTypes : List<EventType>
            # contiguityVerifier : PartialContiguityCondition
            + LazyNFA()
            + getRejectingState()
            + verifyContiguityConditions()
            - getSequencesWithBoundEventType()
            - getUnboundedIterativeEventTypes()
            # createInstance()
            + validateTimeWindow()
            + processNewEvent()
            - performRegularInstanceLoop()
            - relocateInstances()
            - performInstanceLoopWithUnboundedIterativeEvents()
            - performSingleInstanceLoopIteration()
            + shouldActivateUnboundedIterativeMode()
            - isInUnboundedIterativeTypeState()
            # getOutgoingMatchTransitionForTypes()
            # checkInstanceForMatch()
            - processNewEventOnInstance()
            - attemptTransitionOnInstance()
            - canWaitForInput()
            - attemptBufferEvaluation()
            - attemptBufferEvaluationWithPendingEvent()
            - getEventsFromInputBuffer()
            - computeAggregatedBufferedEvents()
            - prepareAggregatedBufferedEvents()
            - getRelevantBufferedEvents()
            - addTransition()
            # addRegularTransition()
            # addTakeTransition()
            # addIterateTransition()
            # addStoreTransition()
            # addTimeoutTransition()
            # addSearchFailedTransition()
            + getLastMatches()
            # appendNFA()
            + size()
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        enum LazyNFANegationTypes {
          NONE
          POST_PROCESSING
          FIRST_CHANCE
        }
      }
    }
  }
  

  LazyMultiPatternTreeNFA -up-|> IMultiPatternEvaluationMechanism


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
