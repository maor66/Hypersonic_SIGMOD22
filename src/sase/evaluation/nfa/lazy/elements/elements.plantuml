@startuml

title __ELEMENTS's Class Diagram__\n

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.elements {
          class EfficientInputBuffer {
              - events : HashMap<EventType, TypeBuffer>
              - timeWindow : long
              + EfficientInputBuffer()
              + EfficientInputBuffer()
              + EfficientInputBuffer()
              + store()
              + storeAll()
              + getTypeBuffer()
              + hasTypeBuffer()
              + addTypeBuffer()
              + addTypeBuffer()
              + getSlice()
              + getSlice()
              + refresh()
              + numberOfEvents()
              + size()
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.elements {
          class TypeBuffer {
              {static} - initialSize : int
              - type : EventType
              - events : List<Event>
              + TypeBuffer()
              + store()
              + storeAll()
              - getIndexWithClosestTimestamp()
              + getSlice()
              + refresh()
              + numberOfEvents()
              + getType()
              + getAllEvents()
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.elements {
          class EvaluationOrder {
              - fullEvaluationOrder : List<EventType>
              - negativeTypes : List<EventType>
              - iterativeTypes : List<EventType>
              + EvaluationOrder()
              - moveIterativeTypesToEnd()
              + getFullEvaluationOrder()
              + getPositiveEvaluationOrder()
              + getInverseNegativeEvaluationOrder()
              + toString()
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.elements {
          class LazyInstance {
              - shouldStoreCurrentEvent : boolean
              - shouldStopEvaluation : boolean
              - lastAggregatedEvents : EfficientInputBuffer
              + LazyInstance()
              # LazyInstance()
              + getAndResetShouldStoreCurrentEvent()
              + getAndResetShouldStopEvaluation()
              + forceTimeout()
              - executeRegularTransition()
              - executeSearchFailedTransition()
              - executeTimeoutTransition()
              + getLastAggregatedEvents()
              + executeTransition()
              - isRegularTransitionPossible()
              + isTransitionPossible()
              + clone()
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.elements {
          class LazyTransition {
              - temporalCondition : EventTemporalPositionCondition
              - type : LazyTransitionType
              - preprocessors : List<BufferPreprocessor>
              - triggerCondition : IterationTriggerCondition
              + LazyTransition()
              + getActualPrecedingEvent()
              + getActualSucceedingEvent()
              + getType()
              + getBufferPreprocessors()
              + shouldCloneInstance()
              + canProceedToBufferEvaluation()
              + enableCache()
              + disableCache()
              + isMatchTransition()
              + verifyCondition()
              + toString()
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.elements {
          enum LazyTransitionType {
            REGULAR
            TIMEOUT
            SEARCH_FAILED
          }
        }
      }
    }
  }
  

  EfficientInputBuffer +-down- TypeBuffer


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
