@startuml

title __ALGORITHM's Class Diagram__\n

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class DynamicOrderingAlgorithm {
                {static} + getAllSubSetsOfSize()
                # calculateBestOrder()
                + calculateEvaluationOrder()
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class EventFrequencyOrderingAlgorithm {
                + calculateEvaluationOrder()
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class EventTypeComparator {
                + compare()
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class FixedOrderingAlgorithm {
                - evaluationOrder : List<EventType>
                + FixedOrderingAlgorithm()
                + calculateEvaluationOrder()
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class GreedyCostModelOrderingAlgorithm {
                # selectNextEventType()
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            abstract class GreedyOrderingAlgorithm {
                {abstract} # selectNextEventType()
                + calculateEvaluationOrder()
                + calculateEvaluationOrder()
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class GreedySelectivityOrderingAlgorithm {
                # selectNextEventType()
                - selectFirstEventType()
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class IterativeImprovementOrderingAlgorithm {
                {static} - maxSteps : long
                {static} - localMinimaRatio : long
                {static} - localMinimaThreshold : long
                - initialStateAlgorithm : IOrderingAlgorithm
                + IterativeImprovementOrderingAlgorithm()
                - getNumberOfLegalMoves()
                - attemptSwapMove()
                - attemptCycleMove()
                - attemptMove()
                - calculateNumOfStepsToLocalMinima()
                + calculateEvaluationOrder()
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class State {
                + order : List<EventType>
                + cost : Double
                + State()
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class RandomOrderingAlgorithm {
                + calculateEvaluationOrder()
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class TrivialOrderingAlgorithm {
                + calculateEvaluationOrder()
            }
          }
        }
      }
    }
  }
  

  DynamicOrderingAlgorithm -up-|> IOrderingAlgorithm
  EventFrequencyOrderingAlgorithm -up-|> IOrderingAlgorithm
  EventFrequencyOrderingAlgorithm +-down- EventTypeComparator
  EventTypeComparator -up-|> Comparator
  FixedOrderingAlgorithm -up-|> IOrderingAlgorithm
  GreedyCostModelOrderingAlgorithm -up-|> IIncrementalOrderingAlgorithm
  GreedyOrderingAlgorithm -up-|> IIncrementalOrderingAlgorithm
  GreedySelectivityOrderingAlgorithm -up-|> IIncrementalOrderingAlgorithm
  IterativeImprovementOrderingAlgorithm -up-|> IOrderingAlgorithm
  IterativeImprovementOrderingAlgorithm +-down- State
  RandomOrderingAlgorithm -up-|> IOrderingAlgorithm
  TrivialOrderingAlgorithm -up-|> IOrderingAlgorithm


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
