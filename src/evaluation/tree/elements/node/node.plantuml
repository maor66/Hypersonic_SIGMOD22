@startuml

title __NODE's Class Diagram__\n

  package sase.evaluation {
    package sase.evaluation.tree {
      package sase.evaluation.tree.elements {
        package sase.evaluation.tree.elements.node {
          class ConjunctiveInternalNode {
              + ConjunctiveInternalNode()
              + ConjunctiveInternalNode()
              # ConjunctiveInternalNode()
              + cloneNode()
              + createEquivalentNode()
          }
        }
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      package sase.evaluation.tree.elements {
        package sase.evaluation.tree.elements.node {
          abstract class InternalNode {
              # leftChild : Node
              # rightChild : Node
              # acceptingPatternId : Long
              + InternalNode()
              + InternalNode()
              # InternalNode()
              + getLeftChild()
              + getRightChild()
              + setLeftChild()
              - setLeftChild()
              + setRightChild()
              - setRightChild()
              - setParentToChild()
              + getOtherChild()
              + getAcceptingPatternId()
              + setAcceptingPatternId()
              + swapRandomEventTypes()
              - swapLeaves()
              + setMainCondition()
              + enableEventTypeCache()
              + markVisited()
              + setMaxParentTimeWindow()
              + actuallyGetEventTypes()
              + getNodesInSubTree()
              + getLeavesInSubTree()
              + finalizeNode()
              # initializeNodeCondition()
              # printNode()
              + getNodeByAtomicCondition()
              + getNodeReachProbability()
              + getShortDescription()
              {abstract} + createEquivalentNode()
          }
        }
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      package sase.evaluation.tree.elements {
        package sase.evaluation.tree.elements.node {
          class LeafNode {
              - eventType : EventType
              - isIterated : boolean
              + LeafNode()
              + LeafNode()
              + getEventType()
              + isIterated()
              + actuallyGetEventTypes()
              + getNodesInSubTree()
              + getLeavesInSubTree()
              + finalizeNode()
              # initializeNodeCondition()
              # printNode()
              + getNodeByAtomicCondition()
              + getNodeReachProbability()
              + cloneNode()
              + getShortDescription()
          }
        }
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      package sase.evaluation.tree.elements {
        package sase.evaluation.tree.elements.node {
          class NSeqInternalNode {
              - negativeEventType : EventType
              - negativeCondition : CNFCondition
              + NSeqInternalNode()
              - createNegativeCondition()
              - validateNegativeCondition()
              + getNegativeEventType()
              + isNodeConditionSatisfied()
              # printNode()
          }
        }
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      package sase.evaluation.tree.elements {
        package sase.evaluation.tree.elements.node {
          abstract class Node {
              - parents : List<Node>
              - level : int
              # mainCondition : CNFCondition
              # nodeCondition : CNFCondition
              - timeWindow : Long
              - enableEventTypeCache : boolean
              - eventTypeCache : List<EventType>
              - visited : boolean
              {static} + getCommonParent()
              + Node()
              + Node()
              + getTimeWindow()
              + setTimeWindow()
              + setMaxParentTimeWindow()
              + enableEventTypeCache()
              + isVisited()
              + markVisited()
              + isMultiTreeNode()
              + getParents()
              + addParent()
              + removeParent()
              + getNodeCondition()
              + isNodeConditionSatisfied()
              + getPeers()
              # completeNodeCreation()
              + getEventTypes()
              + isSuperNode()
              + equals()
              + hashCode()
              + getParent()
              + setParent()
              + getPeer()
              + getMainCondition()
              + finalizeTree()
              + setMainCondition()
              + toString()
              {abstract} + getLeavesInSubTree()
              {abstract} + getNodesInSubTree()
              {abstract} + finalizeNode()
              {abstract} + cloneNode()
              {abstract} # actuallyGetEventTypes()
              {abstract} # initializeNodeCondition()
              {abstract} # printNode()
              {abstract} + getNodeByAtomicCondition()
              {abstract} + getNodeReachProbability()
              {abstract} + getShortDescription()
          }
        }
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      package sase.evaluation.tree.elements {
        package sase.evaluation.tree.elements.node {
          class SeqInternalNode {
              # order : List<EventType>
              + SeqInternalNode()
              + SeqInternalNode()
              # SeqInternalNode()
              + getOrder()
              + finalizeNode()
              - calculateTemporalCondition()
              - createContiguityCondition()
              + cloneNode()
              + createEquivalentNode()
          }
        }
      }
    }
  }
  



right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
