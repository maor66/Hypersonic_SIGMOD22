@startuml

title __TREE's Class Diagram__\n

  package sase.evaluation {
    package sase.evaluation.tree {
      class DisjunctionTreeEvaluationMechanism {
          - trees : List<TreeEvaluationMechanism>
          + DisjunctionTreeEvaluationMechanism()
          + getStateByAtomicCondition()
          + getStateReachProbability()
          + processNewEvent()
          + validateTimeWindow()
          + completeCreation()
          + getLastMatches()
          + size()
          + getStructureSummary()
          + removeConflictingInstances()
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      interface IIncrementalTreeTopologyCreator {
          {abstract} + createTreeTopology()
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      interface ITreeCostModel {
          {abstract} + getCost()
          {abstract} + getMPMTCost()
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      interface ITreeTopologyCreator {
          {abstract} + createTreeTopology()
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      class TopologyCreatorFactory {
          {static} + createTopologyCreator()
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      enum TopologyCreatorTypes {
        NONE
        TRIVIAL
        SELINGER
        ZSTREAM
        ORDERED_ZSTREAM
        ADAPTIVE_ZSTREAM
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      class TopologyCreatorUtils {
          {static} + createNodeByPatternType()
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      class TreeCostModelFactory {
          {static} + createTreeCostModel()
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      enum TreeCostModelTypes {
        NONE
        THROUGHPUT
        THROUGHPUT_LATENCY
        SHARING_DEGREE
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.tree {
      class TreeEvaluationMechanism {
          - root : Node
          # eventTypeToLeafMap : HashMap<EventType, LeafNode>
          # storage : TreeInstanceStorage
          - timeWindow : Long
          - negativeBuffer : EfficientInputBuffer
          - iterativeTypes : List<EventType>
          - lastTimestamp : Long
          + TreeEvaluationMechanism()
          # initTreeStructure()
          # initEventTypeToLeafMap()
          # initStorage()
          - recordCurrentTime()
          - isTimeOut()
          + processNewEvent()
          # createLeafInstance()
          - activateTreeProcessing()
          - processEventOnPeerInstanceSet()
          # getPeers()
          - createIterativeInstances()
          # isIterativeInstance()
          - addNSeqNodes()
          - transformNodeToNSeq()
          - locateNodeToTransformToNSeq()
          - getDependentEventTypes()
          - locateLowestContainingNode()
          + getNegativeBuffer()
          + validateTimeWindow()
          + completeCreation()
          + getLastMatches()
          + size()
          + getRoot()
          + getTimeWindow()
          + getIterativeTypes()
          + getStructureSummary()
          + getStateByAtomicCondition()
          + getStateReachProbability()
          + removeConflictingInstances()
      }
    }
  }
  

  DisjunctionTreeEvaluationMechanism -up-|> IEvaluationMechanism
  DisjunctionTreeEvaluationMechanism -up-|> IEvaluationMechanismInfo
  TreeEvaluationMechanism -up-|> IEvaluationMechanism
  TreeEvaluationMechanism -up-|> IEvaluationMechanismInfo


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
