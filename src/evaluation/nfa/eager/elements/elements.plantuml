@startuml

title __ELEMENTS's Class Diagram__\n

  package sase.evaluation {
    package sase.evaluation.nfa {
      package sase.evaluation.nfa.eager {
        package sase.evaluation.nfa.eager.elements {
          class Instance {
              # automaton : NFA
              # currentState : NFAState
              # matchBuffer : EventBuffer
              - shouldGenerateInputBufferReadyEvent : boolean
              - shouldInvalidate : boolean
              + Instance()
              + Instance()
              + getCurrentState()
              + setCurrentState()
              + getEventsFromMatchBuffer()
              + getMatchBufferEventByType()
              + getMatch()
              + shouldInvalidate()
              + markAsInvalid()
              # getInstanceTimeWindow()
              + isExpired()
              + isExpired()
              + isTransitionPossible()
              # executeMatchBufferTransition()
              + executeTransition()
              + shouldGenerateInputBufferReadyEvent()
              + size()
              + clone()
              + toString()
              + shouldDiscardWithMatch()
              + shouldReportMatch()
          }
        }
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.nfa {
      package sase.evaluation.nfa.eager {
        package sase.evaluation.nfa.eager.elements {
          class InstanceStorage {
              - nfa : NFA
              - instancesByCurrentState : HashMap<NFAState, List<Instance>>
              - acceptingStates : List<NFAState>
              - eventTypeToExpectingTakeStates : HashMap<EventType, List<NFAState>>
              - eventTypeToExpectingStoreStates : HashMap<EventType, List<NFAState>>
              + InstanceStorage()
              - initializeInstanceToTypeHash()
              - initializeTypeToStateHashes()
              + add()
              + remove()
              + addAll()
              + removeAll()
              + getInstancesForEvent()
              + shouldStoreEvent()
              + getInstancesNumber()
              + size()
              + getInstancesInAcceptingStates()
              - validateTimeWindowForInstancesInState()
              + validateTimeWindow()
              + getAllInstances()
              + removeConflictingInstances()
          }
        }
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.nfa {
      package sase.evaluation.nfa.eager {
        package sase.evaluation.nfa.eager.elements {
          class NFAState {
              {static} ~ stateIdCounter : int
              - id : int
              - name : String
              - incomingTransitions : List<Transition>
              - outgoingTransitions : List<Transition>
              - isInitial : boolean
              - isFinal : boolean
              - isAccepting : boolean
              + NFAState()
              + NFAState()
              + NFAState()
              + getId()
              + getName()
              + addIncomingTransition()
              + addOutgoingTransition()
              + getIncomingTransitions()
              + getOutgoingTransitions()
              + isInitial()
              + isFinal()
              + isAccepting()
              + isRejecting()
              + toString()
          }
        }
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.nfa {
      package sase.evaluation.nfa.eager {
        package sase.evaluation.nfa.eager.elements {
          class Transition {
              {static} - MATCH_BUFFER_ACTIONS : List<Action>
              - source : NFAState
              - destination : NFAState
              - eventType : EventType
              - condition : Condition
              + Transition()
              + Transition()
              + getSource()
              + getDestination()
              + getAction()
              + getEventType()
              + getCondition()
              + verifyCondition()
              + setSource()
              + setDestination()
              + setAction()
              + setEventType()
              + setCondition()
              + isMatchTransition()
              + toString()
          }
        }
      }
    }
  }
  

  package sase.evaluation {
    package sase.evaluation.nfa {
      package sase.evaluation.nfa.eager {
        package sase.evaluation.nfa.eager.elements {
          enum Action {
            TAKE
            IGNORE
            STORE
            ITERATE
          }
        }
      }
    }
  }
  

  Transition o-- Action : action
  Transition +-down- Action


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
