@startuml

title __LAZYCEPGIT's Class Diagram__\n

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.eager {
        class AND_NFA {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.eager {
        class AND_SEQ_NFA {
        }
      }
    }
  }
  

  package sase.sase.user.traffic {
    class AarhusTrafficEventTypesConverter {
    }
  }
  

  package sase.sase.user.traffic {
    class AarhusTrafficEventTypesManager {
    }
  }
  

  package sase.sase.adaptive.monitoring {
    class AdaptationNecessityDetectorFactory {
    }
  }
  

  package sase.sase.adaptive.monitoring {
    enum AdaptationNecessityDetectorTypes {
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.adaptation {
      abstract class AdaptationSpecification {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.creators {
        package sase.sase.evaluation.tree.creators.sase.adaptive.zstream {
          class AdaptiveZStreamTreeTopologyCreator {
          }
        }
      }
    }
  }
  

  package sase.sase.base {
    class AggregatedEvent {
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.iteration {
        class AggregatedExternalCondition {
        }
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.algo {
      class AlgoUnitFactory {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.algo {
      class AlgoUnitSpecification {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.algo {
      enum AlgoUnitTypes {
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.sase.base {
        abstract class AtomicCondition {
        }
      }
    }
  }
  

  package sase.sase.base {
    class Attribute {
    }
  }
  

  package sase.sase.aggregator {
    package sase.sase.aggregator.builtin {
      class AverageAggregator {
      }
    }
  }
  

  package sase.sase.user.stocks {
    class AverageStocksVectorAggregator {
    }
  }
  

  package sase.sase.aggregator {
    package sase.sase.aggregator.builtin {
      class AverageVectorAggregator {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      package sase.sase.specification.creators.condition {
        abstract class BasicConditionSpecificationSetCreator {
        }
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.sla {
      class BestPlanSlaVerifier {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.optimizations {
          class BufferFilter {
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.optimizations {
          class BufferGrouper {
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.optimizations {
          abstract class BufferPreprocessor {
          }
        }
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.sase.base {
        class BufferedEventsRatesCondition {
        }
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.sase.base {
        class CNFCondition {
        }
      }
    }
  }
  

  package sase.sase.pattern {
    class CompositePattern {
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.creation {
      class CompositePatternCreator {
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      abstract class Condition {
      }
    }
  }
  

  package sase.sase.config {
    class ConditionConfig {
    }
  }
  

  package sase.sase.statistics {
    class ConditionSelectivityCollector {
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.condition {
      abstract class ConditionSpecification {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      package sase.sase.specification.creators.condition {
        class ConditionSpecificationCreatorFactory {
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      package sase.sase.specification.creators.condition {
        enum ConditionSpecificationCreatorTypes {
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      package sase.sase.specification.creators.condition {
        enum ConditionSpecificationSetCreatorTypes {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.elements {
        package sase.sase.evaluation.tree.elements.node {
          class ConjunctiveInternalNode {
          }
        }
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    class ConstantThresholdAdaptationNecessityDetector {
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.adaptation {
      class ConstantThresholdAdaptationSpecification {
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.sase.specification {
      package sase.sase.user.stocks.sase.specification.creators {
        class CorrelationSelectivityEstimationSetupCreator {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.creators {
        class CostAwareTree {
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class CostBasedLazyNFAEvaluationSpecification {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.cost {
            class CostModelFactory {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.cost {
            enum CostModelTypes {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      package sase.sase.specification.creators.condition {
        class CountersConditionSpecificationSetCreator {
        }
      }
    }
  }
  

  package sase.sase.user.speedd.fraud {
    class CreditCardFraudEventTypesConverter {
    }
  }
  

  package sase.sase.user.speedd.fraud {
    class CreditCardFraudEventTypesManager {
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      abstract class CrossProductSimulationSpecificationCreator {
      }
    }
  }
  

  package sase.sase.base {
    enum Datatype {
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.sase.specification {
      package sase.sase.user.stocks.sase.specification.creators {
        class DeltaSelectivityEstimationSetupCreator {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.plan {
      class DisjunctionEvaluationPlan {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      class DisjunctionTreeEvaluationMechanism {
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.sase.base {
        abstract class DoubleEventCondition {
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.condition {
      abstract class DoubleEventConditionSpecification {
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.workload {
      class DynamicMultiPatternWorkloadManager {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.workload {
      class DynamicMultiPatternWorkloadSpecification {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class DynamicOrderingAlgorithm {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.elements {
          class EfficientInputBuffer {
          }
        }
      }
    }
  }
  

  package sase.sase.simulator {
    class Environment {
    }
  }
  

  package sase.sase.evaluation {
    class EvaluationMechanismFactory {
    }
  }
  

  package sase.sase.evaluation {
    enum EvaluationMechanismTypes {
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.elements {
          class EvaluationOrder {
          }
        }
      }
    }
  }
  

  package sase.sase.config {
    class EvaluationOrderConfig {
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.plan {
      abstract class EvaluationPlan {
      }
    }
  }
  

  package sase.sase.evaluation {
    class EvaluationPlanCreator {
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      abstract class EvaluationSpecification {
      }
    }
  }
  

  package sase.sase.base {
    class Event {
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.common {
      class EventBuffer {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class EventFrequencyOrderingAlgorithm {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.input {
    abstract class EventProducer {
    }
  }
  

  package sase.sase.input {
    class EventProducerFactory {
    }
  }
  

  package sase.sase.input {
    enum EventProducerTypes {
    }
  }
  

  package sase.sase.statistics {
    class EventRateCollector {
    }
  }
  

  package sase.sase.config {
    class EventRateConfig {
    }
  }
  

  package sase.sase.base {
    enum EventSelectionStrategies {
    }
  }
  

  package sase.sase.input {
    class EventStreamModifierFactory {
    }
  }
  

  package sase.sase.input {
    enum EventStreamModifierTypes {
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.time {
        class EventTemporalPositionCondition {
        }
      }
    }
  }
  

  package sase.sase.base {
    class EventType {
    }
  }
  

  package sase.sase.input {
    abstract class EventTypesConverter {
    }
  }
  

  package sase.sase.input {
    enum EventTypesConverterTypes {
    }
  }
  

  package sase.sase.pattern {
    abstract class EventTypesManager {
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      class ExhaustiveMPTCalculator {
      }
    }
  }
  

  package sase.sase.adaptive.estimation {
    class ExponentialHistogramsCounter {
    }
  }
  

  package sase.sase.input {
    package sase.sase.input.producers {
      class FileBasedEventProducer {
      }
    }
  }
  

  package sase.sase.input {
    package sase.sase.input.producers {
      class FileEventStreamReader {
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.iteration {
        class FirstValueExternalCondition {
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class FixedLazyNFAEvaluationSpecification {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class FixedOrderingAlgorithm {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      package sase.sase.multi.calculator.local {
        abstract class GlobalImprovementBasedLocalSearchMPTCalculator {
        }
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.time {
        class GlobalTemporalOrderCondition {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            package sase.sase.evaluation.nfa.lazy.order.algorithm.sase.adaptive.greedy {
              class GreedyAdaptiveOrderingAlgorithm {
              }
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class GreedyCostModelOrderingAlgorithm {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            package sase.sase.evaluation.nfa.lazy.order.algorithm.sase.adaptive.greedy {
              class GreedyInvariantCalculator {
              }
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            package sase.sase.evaluation.nfa.lazy.order.algorithm.sase.adaptive.greedy {
              class GreedyInvariantInput {
              }
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            abstract class GreedyOrderingAlgorithm {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class GreedySelectivityOrderingAlgorithm {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.iteration {
        package sase.sase.pattern.condition.iteration.lazy {
          class GroupByAttributeCondition {
          }
        }
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    interface IAdaptationNecessityDetector {
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.algo {
      interface IAlgoUnit {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      package sase.sase.specification.creators.condition {
        interface IConditionSpecificationCreator {
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      package sase.sase.specification.creators.condition {
        interface IConditionSpecificationSetCreator {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.cost {
            interface ICostModel {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    interface IEvaluationMechanism {
    }
  }
  

  package sase.sase.evaluation {
    interface IEvaluationMechanismInfo {
    }
  }
  

  package sase.sase.adaptive.estimation {
    interface IEventArrivalRateEstimator {
    }
  }
  

  package sase.sase.input {
    interface IEventStreamModifier {
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          interface IIncrementalOrderingAlgorithm {
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      interface IIncrementalTreeTopologyCreator {
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    package sase.sase.adaptive.monitoring.invariant {
      interface IInvariantCalculator {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      interface IMPTCalculator {
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    interface IMultiPatternAdaptationNecessityDetector {
    }
  }
  

  package sase.sase.evaluation {
    interface IMultiPatternEvaluationMechanism {
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          interface IOrderingAlgorithm {
          }
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      interface ISimulationSpecificationCreator {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.sla {
      interface ISlaVerifier {
      }
    }
  }
  

  package sase.sase.input {
    package sase.sase.input.producers {
      interface ISyntheticSelectivityProvider {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      interface ITreeCostModel {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      interface ITreeTopologyCreator {
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.workload {
      interface IWorkloadManager {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.input {
      abstract class InputSpecification {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.eager {
        package sase.sase.evaluation.nfa.eager.elements {
          class Instance {
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.eager {
        package sase.sase.evaluation.nfa.eager.elements {
          class InstanceStorage {
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.elements {
        package sase.sase.evaluation.tree.elements.node {
          abstract class InternalNode {
          }
        }
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    package sase.sase.adaptive.monitoring.invariant {
      class Invariant {
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    package sase.sase.adaptive.monitoring.invariant {
      class InvariantAdaptationNecessityDetector {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.adaptation {
      class InvariantAdaptationSpecification {
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    package sase.sase.adaptive.monitoring.invariant {
      package sase.sase.adaptive.monitoring.invariant.compare {
        abstract class InvariantComparer {
        }
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    package sase.sase.adaptive.monitoring.invariant {
      package sase.sase.adaptive.monitoring.invariant.compare {
        class InvariantComparerFactory {
        }
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    package sase.sase.adaptive.monitoring.invariant {
      package sase.sase.adaptive.monitoring.invariant.compare {
        enum InvariantComparerType {
        }
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    package sase.sase.adaptive.monitoring.invariant {
      abstract class InvariantInput {
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.iteration {
        abstract class IteratedEventExternalCondition {
        }
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.iteration {
        abstract class IteratedEventInternalCondition {
        }
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.iteration {
        package sase.sase.pattern.condition.iteration.lazy {
          abstract class IteratedFilterCondition {
          }
        }
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.iteration {
        package sase.sase.pattern.condition.iteration.eager {
          abstract class IteratedIncrementalCondition {
          }
        }
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.iteration {
        package sase.sase.pattern.condition.iteration.eager {
          class IteratedIncrementalDoubleEventCondition {
          }
        }
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.iteration {
        package sase.sase.pattern.condition.iteration.lazy {
          class IteratedTotalFromIncrementalCondition {
          }
        }
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.iteration {
        package sase.sase.pattern.condition.iteration.eager {
          class IterationTriggerCondition {
          }
        }
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.sase.specification {
      class IterativeAverageStockCorrelationConditionSpecification {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      package sase.sase.multi.calculator.local {
        class IterativeImprovementMPTCalculator {
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class IterativeImprovementMPTEvaluationSpecification {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class IterativeImprovementOrderingAlgorithm {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.sase.specification {
      class IterativeValueCmpStockCorrelationConditionSpecification {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        class LazyChainNFA {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.elements {
          class LazyInstance {
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        class LazyMultiChainNFA {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.elements {
          package sase.sase.evaluation.nfa.lazy.elements.sase.multi {
            class LazyMultiInstance {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        class LazyMultiPatternTreeNFA {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.elements {
          package sase.sase.evaluation.nfa.lazy.elements.sase.multi {
            class LazyMultiState {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        abstract class LazyNFA {
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class LazyNFAEvaluationSpecification {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        enum LazyNFANegationTypes {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.elements {
          class LazyTransition {
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.elements {
          enum LazyTransitionType {
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.elements {
        package sase.sase.evaluation.tree.elements.node {
          class LeafNode {
          }
        }
      }
    }
  }
  

  package sase.sase.config {
    package sase.sase.config.path {
      class LinuxPathConfig {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      package sase.sase.multi.calculator.local {
        abstract class LocalSearchMPTCalculator {
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class LocalSearchMPTEvaluationSpecification {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      package sase.sase.multi.calculator.local {
        package sase.sase.multi.calculator.local.neighborhood {
          abstract class LocalSearchNeighborhood {
          }
        }
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      class MPTCalculatorFactory {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      enum MPTCalculatorTypes {
      }
    }
  }
  

  package sase.sase.config {
    class MainConfig {
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.common {
      class Match {
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    package sase.sase.adaptive.monitoring.invariant {
      package sase.sase.adaptive.monitoring.invariant.compare {
        class MinimalRelativeDistanceInvariantComparer {
        }
      }
    }
  }
  

  package sase.sase.multi {
    class MultiPatternGraph {
    }
  }
  

  package sase.sase.multi {
    class MultiPatternMultiTree {
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.plan {
      class MultiPatternMultiTreeEvaluationPlan {
      }
    }
  }
  

  package sase.sase.multi {
    class MultiPatternTree {
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.plan {
      class MultiPatternTreeEvaluationPlan {
      }
    }
  }
  

  package sase.sase.multi {
    class MultiPatternTreeNode {
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.workload {
      class MultiPatternWorkloadManager {
      }
    }
  }
  

  package sase.sase.multi {
    abstract class MultiPlan {
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class MultiPlanEvaluationSpecification {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      package sase.sase.multi.calculator.local {
        package sase.sase.multi.calculator.local.neighborhood {
          class MultiSetShareNeighborhood {
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.sase.multi {
        class MultiTreeEvaluationMechanism {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.sase.multi {
        class MultiTreeInstance {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.sase.multi {
        class MultiTreeInstanceStorage {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      abstract class NFA {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.eager {
        package sase.sase.evaluation.nfa.eager.elements {
          class NFAState {
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.elements {
        package sase.sase.evaluation.tree.elements.node {
          class NSeqInternalNode {
          }
        }
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      package sase.sase.multi.calculator.local {
        package sase.sase.multi.calculator.local.neighborhood {
          class NeighborhoodFactory {
          }
        }
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      package sase.sase.multi.calculator.local {
        package sase.sase.multi.calculator.local.neighborhood {
          enum NeighborhoodTypes {
          }
        }
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      class NoReorderingMPTCalculator {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      class NoSharingMPTCalculator {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.elements {
        package sase.sase.evaluation.tree.elements.node {
          abstract class Node {
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.eager {
        class OR_AND_SEQ_NFA {
        }
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.algo {
      class OrderAlgoUnit {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.algo {
      class OrderAlgoUnitSpecification {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.plan {
      class OrderEvaluationPlan {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.creators {
        class OrderedZStreamTreeTopologyCreator {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          class OrderingAlgorithmFactory {
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          enum OrderingAlgorithmTypes {
          }
        }
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.time {
        class PairTemporalOrderCondition {
        }
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.contiguity {
        class PairwiseContiguityCondition {
        }
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      package sase.sase.multi.calculator.local {
        package sase.sase.multi.calculator.local.neighborhood {
          class PairwiseShareNeighborhood {
          }
        }
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.contiguity {
        class PartialContiguityCondition {
        }
      }
    }
  }
  

  package sase.sase.config {
    package sase.sase.config.path {
      abstract class PathConfig {
      }
    }
  }
  

  package sase.sase.pattern {
    abstract class Pattern {
    }
  }
  

  package sase.sase.config {
    class PatternConfig {
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.creation {
      abstract class PatternCreator {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.workload {
      enum PatternReorderingSensitivityTypes {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.workload {
      class PatternSpecification {
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.creation {
      enum PatternTypes {
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.workload {
      class PatternWorkloadFactory {
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    class PerformanceDeltaAdaptationNecessityDetector {
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.adaptation {
      class PerformanceDeltaAdaptationSpecification {
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    class PlanCreatorBasedAdaptationNecessityDetector {
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.adaptation {
      class PlanCreatorBasedAdaptationSpecification {
      }
    }
  }
  

  package sase.sase.simulator {
    class PredicateResultsCache {
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class RandomOrderingAlgorithm {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      abstract class RandomPatternSpecificationCreator {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.input {
      class RarestTypeDuplicatorInputSpecification {
      }
    }
  }
  

  package sase.sase.input {
    package sase.sase.input.modifiers {
      class RarestTypeEventStreamModifier {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.eager {
        class SEQ_NFA {
        }
      }
    }
  }
  

  package sase.sase.user.speedd.fraud {
    class SameCreditCardIDCondition {
    }
  }
  

  package sase.sase.user.speedd.fraud {
    class SameCreditCardIDConditionSpecification {
    }
  }
  

  package sase.sase.aggregator {
    abstract class ScalarAggregator {
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      abstract class SelectivityEstimationSetupCreator {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.creators {
        class SelingerTreeTopologyCreator {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.elements {
        package sase.sase.evaluation.tree.elements.node {
          class SeqInternalNode {
          }
        }
      }
    }
  }
  

  package sase.sase.multi {
    class SharedMultiPatternTreeNode {
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.cost {
            class SharingDegreeCostModel {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.cost {
        class SharingDegreeTreeCostModel {
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.input {
      class ShuffleEventTypesInputSpecification {
      }
    }
  }
  

  package sase.sase.pattern {
    class SimplePattern {
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      package sase.sase.multi.calculator.local {
        class SimulatedAnnealingMPTCalculator {
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class SimulatedAnnealingMPTEvaluationSpecification {
      }
    }
  }
  

  package sase.sase.config {
    class SimulationConfig {
    }
  }
  

  package sase.sase.simulator {
    class SimulationHistory {
    }
  }
  

  package sase.sase.specification {
    class SimulationSpecification {
    }
  }
  

  package sase.sase.simulator {
    class Simulator {
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.sase.base {
        abstract class SingleEventCondition {
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      class SinglePatternCrossProductSimulationSpecificationCreator {
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.workload {
      class SinglePatternWorkloadManager {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.workload {
      class SinglePatternWorkloadSpecification {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.sla {
      class SlaAwarePattern {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.sla {
      class SlaVerifierFactory {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.sla {
      enum SlaVerifierTypes {
      }
    }
  }
  

  package sase.sase.adaptive.estimation {
    class SlidingWindowEventArrivalRateEstimator {
    }
  }
  

  package sase.sase.adaptive.estimation {
    class SlidingWindowSelectivityEstimator {
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      class SpecificationCreatorFactory {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      enum SpecificationCreatorTypes {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.common {
      class State {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      package sase.sase.multi.calculator.local {
        package sase.sase.multi.calculator.local.neighborhood {
          class StateSwapNeighborhood {
          }
        }
      }
    }
  }
  

  package sase.sase.adaptive.estimation {
    class StaticEventArrivalRateEstimator {
    }
  }
  

  package sase.sase.statistics {
    class Statistics {
    }
  }
  

  package sase.sase.statistics {
    class StatisticsManager {
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.condition {
      class StockAverageCorrelationCondition {
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.condition {
      class StockCorrelationCondition {
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.sase.specification {
      package sase.sase.user.stocks.sase.specification.creators {
        class StockCorrelationConditionCreator {
        }
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.sase.specification {
      class StockCorrelationConditionSpecification {
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.condition {
      class StockCorrelationIterationTriggerCondition {
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.sase.specification {
      package sase.sase.user.stocks.sase.specification.creators {
        class StockDeltaConditionCreator {
        }
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.condition {
      class StockDeltaOrderingCondition {
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.sase.specification {
      class StockDeltaOrderingConditionSpecification {
      }
    }
  }
  

  package sase.sase.user.stocks {
    class StockEventTypesManager {
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.condition {
      class StockFirstValueCmpCondition {
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.sase.specification {
      class StockFirstValueCmpConditionSpecification {
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.sase.specification {
      package sase.sase.user.stocks.sase.specification.creators {
        class StockMultiPatternSpecificationCreator {
        }
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.sase.specification {
      package sase.sase.user.stocks.sase.specification.creators {
        class StockPatternSpecificationCreator {
        }
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.condition {
      class StockRangeCondition {
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.condition {
      class StockSameCompanyCondition {
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.condition {
      class StockValueCmpIterationTriggerCondition {
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.converters {
      class StocksByCompanyEventTypesConverter {
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.converters {
      class StocksByIndustryEventTypesConverter {
      }
    }
  }
  

  package sase.sase.user.stocks {
    package sase.sase.user.stocks.converters {
      class StocksByRegionEventTypesConverter {
      }
    }
  }
  

  package sase.sase.config {
    class StructureConfig {
    }
  }
  

  package sase.sase.user.synthetic {
    class SyntheticCondition {
    }
  }
  

  package sase.sase.user.synthetic {
    class SyntheticConditionSpecification {
    }
  }
  

  package sase.sase.input {
    package sase.sase.input.producers {
      class SyntheticEventProducer {
      }
    }
  }
  

  package sase.sase.user.synthetic {
    class SyntheticEventTypesConverter {
    }
  }
  

  package sase.sase.user.synthetic {
    class SyntheticEventTypesManager {
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.input {
      class SyntheticInputSpecification {
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.calculator {
      package sase.sase.multi.calculator.local {
        class TabuSearchMPTCalculator {
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class TabuSearchMPTEvaluationSpecification {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.cost {
            class ThroughputCostModel {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.cost {
            class ThroughputLatencyCostModel {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.cost {
        class ThroughputLatencyTreeCostModel {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.cost {
        class ThroughputTreeCostModel {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      class TopologyCreatorFactory {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      enum TopologyCreatorTypes {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      class TopologyCreatorUtils {
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.contiguity {
        class TotalContiguityCondition {
        }
      }
    }
  }
  

  package sase.sase.user.speedd.traffic {
    class TrafficEventTypesManager {
    }
  }
  

  package sase.sase.user.speedd.traffic {
    class TrafficSameVehicleIDConditionSpecification {
    }
  }
  

  package sase.sase.user.speedd.traffic {
    class TrafficSimilarVehicleIDCondition {
    }
  }
  

  package sase.sase.user.speedd.traffic {
    class TrafficSpeedEventTypesConverter {
    }
  }
  

  package sase.sase.user.traffic {
    class TrafficSpeedToVehiclesNumberCorrelationCondition {
    }
  }
  

  package sase.sase.user.traffic {
    class TrafficSpeedToVehiclesNumberCorrelationConditionSpecification {
    }
  }
  

  package sase.sase.user.trams {
    class TramCongestionEventTypesConverter {
    }
  }
  

  package sase.sase.user.trams {
    class TramCongestionIntersectionCondition {
    }
  }
  

  package sase.sase.user.trams {
    class TramCongestionIntersectionConditionSpecification {
    }
  }
  

  package sase.sase.user.trams {
    class TramEventTypesManager {
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.eager {
        package sase.sase.evaluation.nfa.eager.elements {
          class Transition {
          }
        }
      }
    }
  }
  

  package sase.sase.multi {
    package sase.sase.multi.algo {
      class TreeAlgoUnit {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.algo {
      class TreeAlgoUnitSpecification {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      class TreeCostModelFactory {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      enum TreeCostModelTypes {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      class TreeEvaluationMechanism {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.plan {
      class TreeEvaluationPlan {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.evaluation {
      class TreeEvaluationSpecification {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.elements {
        class TreeInstance {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.elements {
        class TreeInstanceStorage {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.creators {
        package sase.sase.evaluation.tree.creators.sase.adaptive.zstream {
          class TreeInvariantCalculator {
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.creators {
        package sase.sase.evaluation.tree.creators.sase.adaptive.zstream {
          class TreeInvariantInput {
          }
        }
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.creators {
      package sase.sase.specification.creators.condition {
        class TriplesConditionSpecificationSetCreator {
        }
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    class TrivialAdaptationNecessityDetector {
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.adaptation {
      class TrivialAdaptationSpecification {
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.condition {
      package sase.sase.pattern.condition.sase.base {
        class TrivialCondition {
        }
      }
    }
  }
  

  package sase.sase.input {
    package sase.sase.input.modifiers {
      class TrivialEventStreamModifier {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.sase.input {
      class TrivialInputSpecification {
      }
    }
  }
  

  package sase.sase.adaptive.monitoring {
    package sase.sase.adaptive.monitoring.invariant {
      package sase.sase.adaptive.monitoring.invariant.compare {
        class TrivialInvariantComparer {
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.nfa {
      package sase.sase.evaluation.nfa.lazy {
        package sase.sase.evaluation.nfa.lazy.order {
          package sase.sase.evaluation.nfa.lazy.order.algorithm {
            class TrivialOrderingAlgorithm {
            }
          }
        }
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.creators {
        class TrivialTreeTopologyCreator {
        }
      }
    }
  }
  

  package sase.sase.input {
    package sase.sase.input.modifiers {
      class TypeShuffleEventStreamModifier {
      }
    }
  }
  

  package sase.sase.pattern {
    class UnaryPattern {
    }
  }
  

  package sase.sase.aggregator {
    class VectorAggregator {
    }
  }
  

  package sase.sase.config {
    package sase.sase.config.path {
      class WindowsPathConfig {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.workload {
      class WorkloadCreationSpecification {
      }
    }
  }
  

  package sase.sase.pattern {
    package sase.sase.pattern.workload {
      enum WorkloadManagerTypes {
      }
    }
  }
  

  package sase.sase.specification {
    package sase.sase.specification.workload {
      class WorkloadSpecification {
      }
    }
  }
  

  package sase.sase.evaluation {
    package sase.sase.evaluation.tree {
      package sase.sase.evaluation.tree.creators {
        class ZStreamTreeTopologyCreator {
        }
      }
    }
  }
  

  AdaptiveZStreamTreeTopologyCreator -up-|> ITreeTopologyCreator
  BasicConditionSpecificationSetCreator -up-|> IConditionSpecificationSetCreator
  BestPlanSlaVerifier -up-|> ISlaVerifier
  ConstantThresholdAdaptationNecessityDetector -up-|> IMultiPatternAdaptationNecessityDetector
  CrossProductSimulationSpecificationCreator -up-|> ISimulationSpecificationCreator
  DisjunctionTreeEvaluationMechanism -up-|> IEvaluationMechanism
  DisjunctionTreeEvaluationMechanism -up-|> IEvaluationMechanismInfo
  DynamicMultiPatternWorkloadManager -up-|> IWorkloadManager
  DynamicOrderingAlgorithm -up-|> IOrderingAlgorithm
  Event -up-|> Comparable
  EventFrequencyOrderingAlgorithm -up-|> IOrderingAlgorithm
  ExhaustiveMPTCalculator -up-|> IMPTCalculator
  FixedOrderingAlgorithm -up-|> IOrderingAlgorithm
  GreedyAdaptiveOrderingAlgorithm -up-|> IOrderingAlgorithm
  GreedyCostModelOrderingAlgorithm -up-|> IIncrementalOrderingAlgorithm
  GreedyInvariantCalculator -up-|> IInvariantCalculator
  GreedyOrderingAlgorithm -up-|> IIncrementalOrderingAlgorithm
  GreedySelectivityOrderingAlgorithm -up-|> IIncrementalOrderingAlgorithm
  InvariantAdaptationNecessityDetector -up-|> IAdaptationNecessityDetector
  InvariantComparer o-- ComparisonType : comparisonType
  IterativeImprovementOrderingAlgorithm -up-|> IOrderingAlgorithm
  LazyMultiPatternTreeNFA -up-|> IMultiPatternEvaluationMechanism
  LocalSearchMPTCalculator -up-|> IMPTCalculator
  MultiPatternTreeNode o-- MultiPatternTreeNode : parent
  MultiPatternWorkloadManager -up-|> IWorkloadManager
  MultiTreeEvaluationMechanism -up-|> IMultiPatternEvaluationMechanism
  NFA -up-|> IEvaluationMechanism
  NFA -up-|> IEvaluationMechanismInfo
  NoReorderingMPTCalculator -up-|> IMPTCalculator
  NoSharingMPTCalculator -up-|> IMPTCalculator
  OrderAlgoUnit -up-|> IAlgoUnit
  OrderedZStreamTreeTopologyCreator -up-|> ITreeTopologyCreator
  Pattern o-- PatternOperatorTypes : type
  PerformanceDeltaAdaptationNecessityDetector -up-|> IAdaptationNecessityDetector
  PlanCreatorBasedAdaptationNecessityDetector -up-|> IAdaptationNecessityDetector
  RandomOrderingAlgorithm -up-|> IOrderingAlgorithm
  RandomPatternSpecificationCreator -up-|> ISimulationSpecificationCreator
  RarestTypeEventStreamModifier -up-|> IEventStreamModifier
  SelectivityEstimationSetupCreator -up-|> ISimulationSpecificationCreator
  SelingerTreeTopologyCreator -up-|> IIncrementalTreeTopologyCreator
  SharingDegreeCostModel -up-|> ICostModel
  SharingDegreeTreeCostModel -up-|> ITreeCostModel
  SinglePatternCrossProductSimulationSpecificationCreator -up-|> ISimulationSpecificationCreator
  SinglePatternWorkloadManager -up-|> IWorkloadManager
  SlidingWindowEventArrivalRateEstimator -up-|> IEventArrivalRateEstimator
  StaticEventArrivalRateEstimator -up-|> IEventArrivalRateEstimator
  StockCorrelationConditionCreator -up-|> IConditionSpecificationCreator
  StockDeltaConditionCreator -up-|> IConditionSpecificationCreator
  StockFirstValueCmpCondition o-- ComparisonOperation : operation
  StockMultiPatternSpecificationCreator -up-|> ISimulationSpecificationCreator
  SyntheticEventProducer -up-|> ISyntheticSelectivityProvider
  ThroughputCostModel -up-|> ICostModel
  ThroughputLatencyCostModel -up-|> ICostModel
  ThroughputLatencyTreeCostModel -up-|> ITreeCostModel
  ThroughputTreeCostModel -up-|> ITreeCostModel
  Transition o-- Action : action
  TreeAlgoUnit -up-|> IAlgoUnit
  TreeEvaluationMechanism -up-|> IEvaluationMechanism
  TreeEvaluationMechanism -up-|> IEvaluationMechanismInfo
  TreeInvariantCalculator -up-|> IInvariantCalculator
  TreeInvariantInput o-- TreeInvariantInput : leftPairOfLeaves
  TreeInvariantInput o-- TreeInvariantInput : rightPairOfLeaves
  TrivialAdaptationNecessityDetector -up-|> IAdaptationNecessityDetector
  TrivialEventStreamModifier -up-|> IEventStreamModifier
  TrivialOrderingAlgorithm -up-|> IOrderingAlgorithm
  TrivialTreeTopologyCreator -up-|> ITreeTopologyCreator
  TypeShuffleEventStreamModifier -up-|> IEventStreamModifier
  ZStreamTreeTopologyCreator -up-|> ITreeTopologyCreator


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
